name: Deploy Node.js to AWS EC2

name: Deploy Node.js to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AMI_ID: ${{ secrets.AMI_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: ./tf

      - name: Terraform Apply
        run: terraform apply -auto-approve \
          -var="aws_access_key=$AWS_ACCESS_KEY_ID" \
          -var="aws_secret_key=$AWS_SECRET_ACCESS_KEY" \
          -var="aws_region=$AWS_REGION" \
          -var="ami_id=$AMI_ID"
        working-directory: ./tf

      - name: Get Terraform Output
        id: terraform-output
        run: |
          cd tf
          INSTANCE_PUBLIC_IP=$(terraform output -raw instance_public_ip)
          echo "instance_public_ip=$INSTANCE_PUBLIC_IP" >> $GITHUB_OUTPUT
          echo "EC2 Public IP: $INSTANCE_PUBLIC_IP"

  deploy:
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Wait for EC2 to be ready
        run: |
          echo "Waiting for EC2 instance to be ready..."
          sleep 60
          timeout 300 bash -c 'until ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 ubuntu@${{ needs.terraform.outputs.ec2_ip }} "echo SSH is ready"; do echo "Waiting for SSH..."; sleep 10; done'

      - name: Deploy Node.js App
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ needs.terraform.outputs.ec2_ip }} << 'EOF'
            sudo mkdir -p ~/my-node-app
            sudo chown ubuntu:ubuntu ~/my-node-app
            cd ~/my-node-app
            rm -rf *
          EOF
          rsync -avz --exclude 'node_modules' --exclude '.git' --exclude 'tf' \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./ ubuntu@${{ needs.terraform.outputs.ec2_ip }}:/home/ubuntu/my-node-app/
          ssh -o StrictHostKeyChecking=no ubuntu@${{ needs.terraform.outputs.ec2_ip }} << 'EOF'
            cd ~/my-node-app
            echo "MONGO_URI=${{ secrets.MONGO_URI }}" > .env
            sudo systemctl status docker
            sudo docker build -t my-node-app .
            sudo docker stop my-node-app || true
            sudo docker rm my-node-app || true
            sudo docker run -d --name my-node-app -p 80:3000 --env-file .env my-node-app
            echo "Deployment completed!"
            echo "Application should be available at: http://${{ needs.terraform.outputs.ec2_ip }}"
          EOF
            sudo docker stop my-node-app || true
            sudo docker rm my-node-app || true
            sudo docker run -d --name my-node-app -p 80:3000 --env-file .env my-node-app
            
            echo "Deployment completed!"
            echo "Application should be available at: http://${{ needs.terraform.outputs.ec2_ip }}"
          EOF