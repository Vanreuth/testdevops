- hosts: contabo
  become: true
  vars:
    app_path: /var/www/myapp
    mongo_port: 27017
    mongo_bind_ip: 127.0.0.1  # restrict to local only (secure)
    mongo_user: myappuser
    mongo_password: "{{ lookup('env', 'MONGO_PASSWORD') }}"
    mongo_db: myappdb
    env_vars:
      PORT: "{{ lookup('env', 'APP_PORT') }}"
      MONGO_URI: "mongodb://{{ mongo_user }}:{{ mongo_password }}@localhost:{{ mongo_port }}/{{ mongo_db }}"
      JWT_SECRET: "{{ lookup('env', 'JWT_SECRET') | default('changeme') }}"
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install required packages
      apt:
        name:
          - git
          - curl
          - build-essential
        state: present

    - name: Add MongoDB GPG key
      apt_key:
        url: https://www.mongodb.org/static/pgp/server-6.0.asc
        state: present

    - name: Add MongoDB repository
      apt_repository:
        repo: "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu {{ ansible_distribution_release }}/mongodb-org/6.0 multiverse"
        state: present
        filename: mongodb-org-6.0

    - name: Install MongoDB
      apt:
        name: mongodb-org
        state: present
        update_cache: yes

    - name: Ensure MongoDB is running
      systemd:
        name: mongod
        state: started
        enabled: yes

    - name: Create MongoDB admin user
      community.mongodb.mongodb_user:
        login_host: localhost
        login_port: "{{ mongo_port }}"
        database: admin
        name: "{{ mongo_user }}"
        password: "{{ mongo_password }}"
        roles: "readWrite,dbAdmin"
        state: present

    - name: Ensure app directory exists
      file:
        path: "{{ app_path }}"
        state: directory
        owner: root
        group: root

    - name: Clone or update repo
      git:
        repo: "git@github.com:USERNAME/REPO.git"
        dest: "{{ app_path }}"
        version: main
        force: yes

    - name: Install dependencies
      npm:
        path: "{{ app_path }}"
        production: yes

    - name: Create .env file from secrets
      copy:
        dest: "{{ app_path }}/.env"
        content: |
          {% for key, value in env_vars.items() %}
          {{ key }}={{ value }}
          {% endfor %}
        owner: root
        group: root
        mode: '0600'

    - name: Start or restart app with PM2
      shell: |
        cd "{{ app_path }}"
        pm2 restart myapp || pm2 start server.js --name myapp --env production
        pm2 save
